---------------------------------[연습문제]----------------------------------------------


/* 연습문제 */
--SYS (관리자계정)
/* 계정 'exam_이니셜' 로 생성 후 해당 계정에서 진행.


테이블명 : MAJOR
1. MAJOR_NO (학과번호) : NUMBER - PK
2. MAJOR_NM (학과명) : VARCHAR2(100) - NOT NULL




테이블명 : STUDENT
1. STUDENT_ID (학번) : NUMBER - PK
2. STUDENT_NAME (이름) : VARCHAR2(20) - NOT NULL
3. GENDER (성별) : VARCHAR2(3) CHECK ('남' , '여')
4. BIRTH (생년월일 : 'YYYY-MM-DD '형식으로 작성) : DATE
5. MAJOR_NO (전공학과번호) : NUMBER - FK (부모키 삭제 시 자식키 NULL 로 변경)
*/


-- 각 테이블마다 INSERT 5개 이상,



-- MAJOR 테이블 생성 --
CREATE TABLE MAJOR (
		MAJOR_NO NUMBER PRIMARY KEY,
		MAJOR_NM VARCHAR2(100) NOT NULL
);

DROP TABLE MAJOR;


-- STUDENT 테이블 생성 --
CREATE TABLE STUDENT (
		STUDENT_ID NUMBER PRIMARY KEY,
		STUDENT_NAME VARCHAR2(20) NOT NULL,
		GENDER VARCHAR2(3) CHECK ( GENDER IN ('남', '여') ),
		BIRTH DATE,
		MAJOR_NO NUMBER REFERENCES MAJOR ON DELETE SET NULL
);

DROP TABLE STUDENT;

INSERT INTO MAJOR VALUES (1, '컴퓨터공학과');
INSERT INTO MAJOR VALUES (2, '산림환경시스템학과');
INSERT INTO MAJOR VALUES (3, '기계공학과');
INSERT INTO MAJOR VALUES (4, '체육교육학과');
INSERT INTO MAJOR VALUES (5, '법학과');

SELECT * FROM MAJOR;

INSERT INTO STUDENT VALUES (001, '손흥민', '남', '1992-05-21', 2);
INSERT INTO STUDENT VALUES (002, '김민재', '남', '1996-02-07', 3);
INSERT INTO STUDENT VALUES (003, '음바페', '남', '1998-11-30', 1);
INSERT INTO STUDENT VALUES (004, '지소연', '여', '1995-12-02', 4);
INSERT INTO STUDENT VALUES (005, '김연아', '여', '2000-03-15', 5);
INSERT INTO STUDENT VALUES (006, '홀란드', '남', '2001-09-20', 4);

SELECT * FROM STUDENT;


-- MAJOR_NM 학과명 MAJOR_NAME으로 변경해보기
ALTER TABLE MAJOR RENAME COLUMN MAJOR_NM TO MAJOR_NAME;

SELECT * FROM MAJOR;

SELECT MAJOR_NO, MAJOR_NAME, STUDENT_ID, STUDENT_NAME, GENDER
FROM MAJOR 
JOIN STUDENT USING (MAJOR_NO)
WHERE EXTRACT (YEAR FROM BIRTH) < 2000;


UPDATE STUDENT SET STUDENT_ID = 201 WHERE STUDENT_ID = 1;
UPDATE STUDENT SET STUDENT_ID = 202 WHERE STUDENT_ID = 2;
UPDATE STUDENT SET STUDENT_ID = 203 WHERE STUDENT_ID = 3;
UPDATE STUDENT SET STUDENT_ID = 204 WHERE STUDENT_ID = 4;
UPDATE STUDENT SET STUDENT_ID = 205 WHERE STUDENT_ID = 5;
UPDATE STUDENT SET STUDENT_ID = 206 WHERE STUDENT_ID = 6;

DELETE FROM STUDENT WHERE STUDENT_ID = 206;

SELECT * FROM STUDENT;

ALTER TABLE STUDENT ADD MANAGER_ID NUMBER;
UPDATE STUDENT SET MANAGER_ID = 101 WHERE STUDENT_ID = 206;
UPDATE STUDENT SET MANAGER_ID = 102 WHERE STUDENT_ID = 204;
UPDATE STUDENT SET MANAGER_ID = 103 WHERE STUDENT_ID = 205;
UPDATE STUDENT SET MANAGER_ID = 101 WHERE STUDENT_ID = 201;
UPDATE STUDENT SET MANAGER_ID = 102 WHERE STUDENT_ID = 203;
UPDATE STUDENT SET MANAGER_ID = 103 WHERE STUDENT_ID = 202;



INSERT INTO STUDENT VALUES (206, '홀란드', '남', '2001-09-20', 4);

SELECT * FROM STUDENT;

CREATE TABLE PROFESSOR (
		MAJOR_NUMBER NUMBER PRIMARY KEY,
		PROFESSOR_NAME VARCHAR2(30) NOT NULL,
		PROFESSOR_NO NUMBER UNIQUE,
		GENDER CHAR(3) CHECK (GENDER IN('남', '여')),
		HIRE_DATE DATE
);

DROP TABLE PROFESSOR;

SELECT * FROM PROFESSOR;

INSERT INTO PROFESSOR VALUES (1, '황선홍', 101, '남', '2023-12-20');
INSERT INTO PROFESSOR VALUES (2, '펩과르디올라', 102, '남', '2015-11-10');
INSERT INTO PROFESSOR VALUES (4, '위르켄클롭', 103, '남', '2009-05-31');


ALTER TABLE STUDENT ADD CONSTRAINT PRO_STU_MANAGER FOREIGN KEY (MANAGER_ID) REFERENCES PROFESSOR(PROFESSOR_NO) ON DELETE SET NULL;

SELECT STUDENT_NAME, STUDENT_ID, MAJOR_NO, PROFESSOR_NO
FROM STUDENT
JOIN PROFESSOR ON (MANAGER_ID = PROFESSOR_NO)
WHERE EXTRACT (YEAR FROM BIRTH) >= 2000;

-----------------------------------------------------------------------------------------------------------------------------------


-------------[쇼핑몰 DB 연습문제]-------------------

-- 1) 카테고리 테이블(CATEGORIES)
CREATE TABLE CATEGORIES (
		CATEGORY_ID NUMBER PRIMARY KEY,
		CATEGORY_NAME VARCHAR2(100) UNIQUE
);

COMMENT ON COLUMN CATEGORIES.CATEGORY_ID IS '카테고리ID';
COMMENT ON COLUMN CATEGORIES.CATEGORY_NAME IS '카테고리이름';

-- 2) 상품 정보 테이블 (PRODUCTS)
CREATE TABLE PRODUCTS (
		PRODUCT_ID NUMBER PRIMARY KEY,
		PRODUCT_NAME VARCHAR2(100) NOT NULL,
		CATEGORY NUMBER REFERENCES CATEGORIES(CATEGORY_ID),
		PRICE NUMBER DEFAULT 0,
		STOCK_QUANTITY NUMBER DEFAULT 0
);

COMMENT ON COLUMN PRODUCTS.PRODUCT_ID IS '상품코드';
COMMENT ON COLUMN PRODUCTS.PRODUCT_NAME IS '상품이름';
COMMENT ON COLUMN PRODUCTS.CATEGORY IS '카테고리';
COMMENT ON COLUMN PRODUCTS.PRICE IS '가격';
COMMENT ON COLUMN PRODUCTS.STOCK_QUANTITY IS '재고량';

-- 3) 고객 정보 테이블 (CUSTOMERS)
CREATE TABLE CUSTOMERS(
		CUSTOMER_ID NUMBER PRIMARY KEY,
		NAME VARCHAR2(20) NOT NULL,
		GENDER CHAR(3) CHECK (GENDER IN ('남', '여')),
		ADDRESS VARCHAR(100),
		PHONE VARCHAR(30)
);

COMMENT ON COLUMN CUSTOMERS.CUSTOMER_ID IS '고객ID';
COMMENT ON COLUMN CUSTOMERS.NAME IS '이름';
COMMENT ON COLUMN CUSTOMERS.GENDER IS '성별';
COMMENT ON COLUMN CUSTOMERS.ADDRESS IS '주소';
COMMENT ON COLUMN CUSTOMERS.PHONE IS '전화번호';

-- 4) 주문 정보 테이블 (ORDERS)
CREATE TABLE ORDERS (
		ORDER_ID NUMBER PRIMARY KEY,
		CUSTOMER_ID NUMBER REFERENCES CUSTOMERS(CUSTOMER_ID) ON DELETE CASCADE,
		ORDER_DATE DATE DEFAULT SYSDATE,
		STATUS CHAR(1) CHECK (STATUS IN ('Y', 'N') )
);

COMMENT ON COLUMN ORDERS.ORDER_ID IS '주문번호';
COMMENT ON COLUMN ORDERS.CUSTOMER_ID IS '고객ID';
COMMENT ON COLUMN ORDERS.ORDER_DATE IS '주문일';
COMMENT ON COLUMN ORDERS.STATUS IS '처리상태';

ALTER TABLE ORDERS MODIFY STATUS DEFAULT 'N';

-- 5) 주문 상세 정보 테이블(ORDER_DETAILS)
CREATE TABLE ORDER_DETAILS (
		ORDER_DETAIL_ID NUMBER PRIMARY KEY,
		ORDER_ID NUMBER REFERENCES ORDERS(ORDER_ID) ON DELETE CASCADE,
		PRODUCT_ID NUMBER REFERENCES PRODUCTS(PRODUCT_ID) ON DELETE SET NULL,
		QUANTITY NUMBER,
		PRICE_PER_UNIT NUMBER
);


COMMENT ON COLUMN ORDER_DETAILS.ORDER_DETAIL_ID IS '주문상세ID';
COMMENT ON COLUMN ORDER_DETAILS.ORDER_ID IS '주문번호';
COMMENT ON COLUMN ORDER_DETAILS.PRODUCT_ID IS '상품코드';
COMMENT ON COLUMN ORDER_DETAILS.QUANTITY IS '수량';
COMMENT ON COLUMN ORDER_DETAILS.PRICE_PER_UNIT IS '가격';

---------------------------------------------------------------------------------------------------------------


INSERT INTO CATEGORIES VALUES (1, '스마트폰');
INSERT INTO CATEGORIES VALUES (2, 'TV');
INSERT INTO CATEGORIES VALUES (3, 'Gaming');

INSERT INTO PRODUCTS VALUES (101, 'Apple iPhone 12', 1, 1500000, 30);
INSERT INTO PRODUCTS VALUES (102, 'Samsung Galaxy S24', 1, 1800000, 50);
INSERT INTO PRODUCTS VALUES (201, 'LG OLED TV', 2, 3600000, 10);
INSERT INTO PRODUCTS VALUES (301, 'Sony PlayStation 5', 3, 700000, 15);

INSERT INTO CUSTOMERS VALUES (1, '홍길동', '남', '서울시 성동구 왕십리', '010-1111-2222');
INSERT INTO CUSTOMERS VALUES (2, '유관순', '여', '서울시 종로구 안국동', '010-3333-1111');


INSERT INTO ORDERS VALUES (576, 1, '2024-02-29', DEFAULT);
INSERT INTO ORDERS VALUES (978, 2, '2024-03-11', 'Y');
INSERT INTO ORDERS VALUES (777, 2, '2024-03-11', DEFAULT);
INSERT INTO ORDERS VALUES (134, 1, '2022-12-25', 'Y');
INSERT INTO ORDERS VALUES (499, 1, '2020-01-03', 'Y');

INSERT INTO ORDER_DETAILS VALUES (111, 576, 101, 1, 1500000);
INSERT INTO ORDER_DETAILS VALUES (222, 978, 201, 2, 3600000);
INSERT INTO ORDER_DETAILS VALUES (333, 978, 102, 1, 1800000);
INSERT INTO ORDER_DETAILS VALUES (444, 777, 301, 5, 700000);
INSERT INTO ORDER_DETAILS VALUES (555, 134, 102, 1, 1800000);
INSERT INTO ORDER_DETAILS VALUES (666, 499, 201, 3, 3600000);

---------------------------------------------------------------------------------------------------------------
-- 1번 문제 --
SELECT NAME 고객명, ORDER_DATE 주문일, STATUS 처리상태
FROM CUSTOMERS
JOIN ORDERS USING (CUSTOMER_ID)
WHERE STATUS ='N';


-- 2번 문제 --
SELECT ORDER_ID, ORDER_DATE, STATUS
FROM ORDERS
JOIN CUSTOMERS USING (CUSTOMER_ID)
WHERE NAME = '홍길동'
AND EXTRACT(YEAR FROM ORDER_DATE) = EXTRACT(YEAR FROM SYSDATE);


-- 3번 문제 --
SELECT ORDER_ID, PRODUCT_NAME, QUANTITY, PRICE, QUANTITY * PRICE
FROM ORDER_DETAILS
JOIN PRODUCTS USING (PRODUCT_ID)
JOIN ORDERS USING (ORDER_ID)
JOIN CUSTOMERS USING (CUSTOMER_ID)
WHERE NAME = '유관순'
ORDER BY 3 DESC;





























